#!/usr/bin/env python3
"""
Test WireMock mTLS connection using httpx.
"""
import httpx
import ssl

# Configuration
WIREMOCK_URL = "https://localhost:8443"
CLIENT_CERT = "certs/client-cert.pem"
CLIENT_KEY = "certs/client-key.pem"
CA_CERT = "certs/ca-cert.pem"

def create_ssl_context_with_client_cert(verify_server=False):
    """Create SSL context with client certificate."""
    if verify_server:
        ssl_context = ssl.create_default_context(cafile=CA_CERT)
    else:
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
    
    ssl_context.load_cert_chain(certfile=CLIENT_CERT, keyfile=CLIENT_KEY)
    return ssl_context

def test_without_client_cert():
    """Test mTLS enforcement - connection without client cert should be rejected."""
    print("üîí Test 1: mTLS Enforcement - No client certificate")
    print("   Expected: Connection rejected by server")
    try:
        # Try to connect without providing client certificate
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        with httpx.Client(verify=ssl_context) as client:
            response = client.get(f"{WIREMOCK_URL}/__admin/health", timeout=5)
            print(f"   ‚ùå FAILED: Server accepted connection without client cert!")
            print(f"   Status: {response.status_code}")
    except httpx.ReadError as e:
        if "bad certificate" in str(e).lower():
            print(f"   ‚úÖ SUCCESS: Server rejected connection (mTLS enforced)")
        else:
            print(f"   ‚ö†Ô∏è  Failed with: {e}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Failed with {type(e).__name__}: {str(e)[:100]}")

def test_with_client_cert():
    """Test mTLS - connection with valid client certificate should succeed."""
    print("\nüîì Test 2: mTLS Authentication - Client certificate only")
    print("   Expected: Connection accepted by server")
    print("   Note: Client skips server cert verification for comparison")
    try:
        ssl_context = create_ssl_context_with_client_cert(verify_server=False)
        
        with httpx.Client(verify=ssl_context) as client:
            response = client.get(f"{WIREMOCK_URL}/__admin/health", timeout=5)
            print(f"   ‚úÖ SUCCESS: Server accepted client certificate")
            print(f"   Status: {response.status_code}")
            print(f"   Server: WireMock v{response.json()['version']}")
    except Exception as e:
        print(f"   ‚ùå FAILED: {type(e).__name__}: {e}")

def test_full_mtls_with_server_verification():
    """Test full mTLS - both client and server verify each other."""
    print("\nüîê Test 3: Full mTLS - Mutual certificate verification")
    print("   Expected: Both sides verify each other's certificates")
    try:
        ssl_context = create_ssl_context_with_client_cert(verify_server=True)
        
        with httpx.Client(verify=ssl_context) as client:
            response = client.get(f"{WIREMOCK_URL}/__admin/health", timeout=5)
            print(f"   ‚úÖ SUCCESS: Full mutual TLS working!")
            print(f"   ‚úì Client verified server's certificate (signed by CA)")
            print(f"   ‚úì Server verified client's certificate (signed by CA)")
            print(f"   Status: {response.status_code}")
    except Exception as e:
        if "certificate verify failed" in str(e).lower():
            print(f"   ‚ùå FAILED: Client rejected server's certificate")
            print(f"   Reason: {str(e)[:100]}")
        else:
            print(f"   ‚ùå FAILED: {type(e).__name__}: {str(e)[:100]}")

def test_api_call_with_mtls():
    """Test API functionality with mTLS."""
    print("\nüì° Test 4: API Call with mTLS - Stub endpoint")
    print("   Expected: API call succeeds with client certificate")
    try:
        ssl_context = create_ssl_context_with_client_cert(verify_server=False)
        
        with httpx.Client(verify=ssl_context) as client:
            response = client.get(f"{WIREMOCK_URL}/hello", timeout=5)
            if response.status_code == 404:
                print(f"   ‚ö†Ô∏è  No stub configured (404)")
            else:
                print(f"   ‚úÖ SUCCESS: API call succeeded")
                print(f"   Status: {response.status_code}")
                print(f"   Response: {response.text}")
    except Exception as e:
        print(f"   ‚ùå FAILED: {type(e).__name__}: {e}")

def test_with_curl_example():
    """Show curl command examples."""
    print("\nüí° Test 5: Curl Examples")
    print("   Full mTLS with CA verification:")
    print("   $ curl --cacert certs/ca-cert.pem --cert certs/client-cert.pem \\")
    print("       --key certs/client-key.pem https://localhost:8443/hello")
    print()
    print("   Without server verification (-k flag):")
    print("   $ curl -k --cert certs/client-cert.pem --key certs/client-key.pem \\")
    print("       https://localhost:8443/hello")
    print()
    print("   Without client cert (should fail):")
    print("   $ curl -k https://localhost:8443/hello")
    print("   # Error: sslv3 alert bad certificate")

if __name__ == "__main__":
    print("=" * 70)
    print("WireMock mTLS Test Suite")
    print("=" * 70)
    print("\nTesting mutual TLS (mTLS) authentication:")
    print("- Server authenticates client using certificate")
    print("- Client authenticates server using certificate (optional)")
    print()
    
    test_without_client_cert()
    test_with_client_cert()
    test_full_mtls_with_server_verification()
    test_api_call_with_mtls()
    test_with_curl_example()
    
    print("\n" + "=" * 70)
    print("Summary:")
    print("‚úÖ Full mutual TLS (mTLS) is working!")
    print("‚úì Server validates client certificates (signed by CA)")
    print("‚úì Client validates server certificates (signed by CA)")
    print("‚úì Both sides use the same Certificate Authority")
    print("=" * 70)
